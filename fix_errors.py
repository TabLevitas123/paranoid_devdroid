
import openai
import sys
import shutil
import os
import time
import subprocess

# Install dependencies
def install_dependencies():
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "openai"])
    except subprocess.CalledProcessError as e:
        print(f"Failed to install dependencies: {e}")
        sys.exit(1)

# Install dependencies before proceeding
install_dependencies()

# OpenAI API key is passed as the first argument to the script
api_key = sys.argv[1]

# Define the file that needs to be fixed (main.py)
file_to_fix = 'main.py'

# Backup the original file before making changes
shutil.copy(file_to_fix, f'{file_to_fix}.bak')

# Load the error log from the failed run
with open('error_log.txt', 'r') as f:
    error_message = f.read()

# Initialize the OpenAI API
openai.api_key = api_key

# Retry up to 10 times if the program fails
max_retries = 10
attempt = 0
success = False

while attempt < max_retries and not success:
    attempt += 1
    print(f"Attempt {attempt} to fix the error...")

    # Create the prompt to ask OpenAI how to fix the error
    prompt = f'I encountered the following error while running a Python program:\n\n{error_message}\n\nHow can I fix this issue? Please provide the exact code to modify or add.'

    # Call OpenAI API to generate the fix
    response = openai.Completion.create(
      engine="text-davinci-003",
      prompt=prompt,
      max_tokens=500,
      temperature=0
    )

    # Extract the suggested fix from the response
    fix = response.choices[0].text.strip()

    # Save the fix to a file for logging purposes
    with open('suggested_fix.txt', 'a') as f:
        f.write(f"Attempt {attempt} Fix:\n" + fix + "\n")

    # Print the fix for debugging
    print(f"Suggested fix (Attempt {attempt}):", fix)

    # Apply the fix by appending it to the main Python file
    with open(file_to_fix, 'a') as f:
        f.write(f"\n# Fix generated by OpenAI (Attempt {attempt}):\n" + fix)

    print(f"Fix applied to {file_to_fix} (Attempt {attempt})")

    # Re-run the program to see if the fix worked
    exit_code = os.system(f'python {file_to_fix}')

    # If the program still fails, notify the user and retry
    if exit_code != 0:
        print(f"Program still failed with exit code {exit_code}. Retrying after a short delay...")
        time.sleep(5)  # Wait for 5 seconds before retrying
    else:
        print("Program ran successfully after applying the fix!")
        success = True

# If we reach the maximum attempts without success, notify the user
if not success:
    print(f"Failed to fix the error after {max_retries} attempts. Check suggested_fix.txt for details.")
